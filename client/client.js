// Generated by CoffeeScript 1.10.0
var animate, height, mainPageOn, mainPageSprite, mainPageTex, play, players, renderer, socket, stage, uuid, width;

window.onload = function() {
  var height, width;
  width = window.innerWidth;
  height = window.innerHeight;
  document.getElementById("loading-container").style.visibility = "hidden";
  document.getElementById("nickname-input-container").style.left = width * 38.5 / 100 + "px";
  document.getElementById("nickname-input-container").style.top = height * 50 / 100 + "px";
  document.getElementById("nickname-input").style.width = width * 22.5 / 100 + "px";
  document.getElementById("nickname-input").style.height = width * 2.5 / 100 + "px";
  document.getElementById("nickname-input").style.border = width * 0.3 / 100 + "px solid #000000";
  document.getElementById("nickname-input").style.fontSize = width * 2.4 / 100 + "px";
  document.getElementById("nickname-input-container").style.visibility = "visible";
  animate();
};

mainPageOn = true;

width = window.innerWidth;

height = window.innerHeight;

renderer = PIXI.autoDetectRenderer(width, height, {
  backgroundColor: 0x323234,
  interactive: true
});

document.body.appendChild(renderer.view);

stage = new PIXI.Container();

mainPageTex = PIXI.Texture.fromImage("client/img/main-screen.png");

mainPageSprite = new PIXI.Sprite(mainPageTex);
mainPageSprite.anchor.x = 0.5;
mainPageSprite.anchor.y = 0.8;
mainPageSprite.position.x = width / 2;
mainPageSprite.position.y = height / 2;
mainPageSprite.scale.x = width / 5000;
mainPageSprite.scale.y = width / 5000;

stage.addChild(mainPageSprite);

animate = function() {
  requestAnimationFrame(animate);
  renderer.render(stage);
};

socket = io();

players = {};

uuid = void 0;

play = function(e) {
  var i, len, player;
  if (e.keyCode === 13) {
    socket.emit("nickname", {
      nickname: document.getElementById("nickname-input").value
    });
    document.getElementById("nickname-input-container").style.visibility = "hidden";
    stage.removeChild(mainPageSprite);
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      stage.addChild(player.sprite);
    }
    return mainPageOn = false;
  }
};

window.onresize = function(event) {
  width = window.innerWidth;
  height = window.innerHeight;
  if (mainPageOn) {
    document.getElementById("nickname-input-container").style.left = width * 38.5 / 100 + "px";
    document.getElementById("nickname-input-container").style.top = height * 50 / 100 + "px";
    document.getElementById("nickname-input").style.width = width * 22.5 / 100 + "px";
    document.getElementById("nickname-input").style.height = width * 2.5 / 100 + "px";
    document.getElementById("nickname-input").style.border = width * 0.3 / 100 + "px solid #000000";
    document.getElementById("nickname-input").style.fontSize = width * 2.4 / 100 + "px";
    mainPageSprite.position.x = width / 2;
    mainPageSprite.position.y = height / 2;
    mainPageSprite.scale.x = width / 5000;
    mainPageSprite.scale.y = width / 5000;
  }
  return renderer.resize(width, height);
};

socket.on("all-current-players", function(data) {
  var i, len, player, playerInfo, texture;
  uuid = data.uuid;
  players = data.players;
  for (i = 0, len = players.length; i < len; i++) {
    playerInfo = players[i];
    texture = PIXI.Texture.fromImage('http://pixijs.github.io/examples/_assets/basics/bunny.png');
    player = new PIXI.Sprite(texture);
    player.anchor.x = 0.5;
    player.anchor.y = 0.5;
    player.position.x = playerInfo.positionX;
    player.position.y = playerInfo.positionY;
    player.scale.x = 1;
    player.scale.y = 1;
    players[sprite] = player;
  }
});

socket.on("player-disconected", function(data) {
  console.log("Disconected: " + data.uuid);
  stage.removeChild(players[data.uuid]);
});

socket.on("positions", function(data) {
  var i, len, player;
  if (mainPageOn === false) {
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      player.sprite.position.x = data[player.uuid].positionX;
      player.sprite.position.y = data[player.uuid].positionY;
    }
  }
});
